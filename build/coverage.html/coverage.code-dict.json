{"/home/travis/build/npmtest/node-npmtest-node-neo4j/test.js":"/* istanbul instrument in package npmtest_node_neo4j */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-neo4j/lib.npmtest_node_neo4j.js":"/* istanbul instrument in package npmtest_node_neo4j */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_neo4j = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_neo4j = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-neo4j/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-neo4j && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_neo4j */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_neo4j\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_neo4j.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_neo4j.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_neo4j.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_neo4j.__dirname + '/lib.npmtest_node_neo4j.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-neo4j/node_modules/node-neo4j/index.js":"/*jslint node: true */\n'use strict';\n\nmodule.exports = require('./lib/main.js');","/home/travis/build/npmtest/node-npmtest-node-neo4j/node_modules/node-neo4j/lib/main.js":"'use strict';\n\nvar request = require('superagent'),\n\tstep = require('step'),\n\tutil = require('util'),\n\tcypher = require('./utils/cypher'),\n\tValidator = require('./utils/validator'),\n\tparser = require('./utils/parser');\n\nmodule.exports = Neo4j;\n\nfunction Neo4j(url, token){\n\tif(typeof url !== 'undefined' && url !== ''){\n\t\tthis.url = url.slice(-1) !== '/' ? url : url.slice(0, -1); // remove trailing forward slash if present\n\t} else {\n\t\tthis.url = 'http://localhost:7474';\n\t}\n\n\tif(token){\n\t\tthis.header = {'Authorization': 'Basic realm=\"Neo4j\" ' + token};\n\t} else {\n\t\tthis.header = {};\n\t}\n}\n\n/*\tInsert a Node\n\tReturns the node that is inserted and his node id (property: _id)\n\tExamples:\n\tInsert a Node with no label:\n\t\tinsertNode({ name: 'Kristof' }, callback);\n\tInsert a Node with one label:\n\t\tinsertNode({ name: 'Kristof' }, ['Student'], callback);\n\t\tinsertNode({ name: 'Kristof' }, 'Student', callback);\n\t\treturns { _id: 14, name: 'Kristof' }\n\tInsert a Node with three labels:\n\t\tinsertNode({ name:'Darth Vader', level: 99, hobbies: ['lightsaber fighting', 'cycling in space'], shipIds: [123, 321] }, ['User', 'Evil' ,'Man'], callback);\n\t\treturns { _id: 17, name:'Darth Vader', level: 99, hobbies: ['lightsaber fighting', 'cycling in space'], shipIds: [123, 321] }\t*/\n\nNeo4j.prototype.insertNode = function(node, labels, callback){\n\tvar that = this;\n\t// Insert node without a label with post request\n\tif(typeof callback === 'undefined') {\n\t\tcallback = labels;\n\t\trequest\n\t\t\t.post(this.url + '/db/data/node')\n\t\t\t.set(this.header)\n\t\t\t.send(node)\n\t\t\t.end(function(result){\n\t\t\t\tif(result.body && result.body.data) {\n\t\t\t\t\tthat.addNodeId(result.body, callback);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(new Error('Response body is empty'), null);\n\t\t\t\t}\n\t\t\t});\n\t} else {\n\t\tvar val = new Validator();\n\n\t\tif(val.labels(labels).hasErrors) {\n\t\t\treturn callback(val.error(), null);\n\t\t}\n\n\t\t// Flexibility: make array of single string\n\t\tif(typeof labels === 'string') {\n\t\t\tlabels = [labels];\n\t\t}\n\n\t\t// Insert node and label(s) with cypher query\n\t\tif(labels instanceof Array){\n\t\t\tvar query = 'CREATE (data'+  cypher.labels(labels) + ' {params}) RETURN data';\n\t\t\tthis.cypherQuery(query, { params: node }, function(err, res) {\n\t\t\t\tif(err) {\n\t\t\t\t\tcallback(err, null);\n\t\t\t\t}\telse {\n\t\t\t\t\tcallback(err, res.data[0]);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tcallback(new Error('The second parameter \"labels\" should be an array with strings OR \"labels\" should be a callback function.'), null);\n\t\t}\n\t}\n};\n\n/*\tGet an array of labels of a Node\n\tExample:\n\tGet all labels of node 77:\n\t\treadLabels(77, callback);\n\t\treturns ['User','Student','Man']\n*/\n\nNeo4j.prototype.readLabels = function(node_id, callback){\n\trequest\n\t\t.get(this.url + '/db/data/node/' + node_id + '/labels')\n\t\t.set(this.header)\n\t\t.end(function(result){\n\t\t\tif(result.body) {\n\t\t\t\tcallback(null, result.body);\n\t\t\t} else {\n\t\t\t\tcallback(new Error('Response is empty'), null);\n\t\t\t}\n\t\t});\n};\n\n\n/* Delete a Node --------- */\n// Nodes with Relationships cannot be deleted -> deliver proper error message\n\nNeo4j.prototype.deleteNode = function(node_id, callback){\n\trequest\n\t\t.del(this.url + '/db/data/node/' + node_id)\n\t\t.set(this.header)\n\t\t.end(function(result){\n\t\t\tswitch(result.statusCode){\n\t\t\t\tcase 204:\n\t\t\t\t\tcallback(null, true); // Node was deleted.\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, false); // Node doesn't exist.\n\t\t\t\t\tbreak;\n\t\t\t\tcase 409:\n\t\t\t\t\tcallback(null, false); // Node has Relationships and cannot be deleted.\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' occurred while deleting a node.'), null);\n\t\t\t}\n\t\t});\n};\n\n// Delete all nodes with `labels` and `properties`.\n// * `labels`          String|Array[String]    e.g.: '', [], 'User', ['User', 'Student']\n// * 'properties'      Object                  e.g.: { userid: '124' }\n// Returns the number of deleted nodes.\n\n// Examples:\n//   deleteNodesWithLabelsAndProperties('User',{ firstname: 'Sam', male: true }, callback);\n//   deleteNodesWithLabelsAndProperties(['User','Admin'], { 'name': 'Sam'}, callback);\n\nNeo4j.prototype.deleteNodesWithLabelsAndProperties = function (labels, properties, callback){\n  var where = cypher.where('data', properties);\n  var query = 'MATCH (data'+  cypher.labels(labels) + ')';\n\n  if (where !== '') {\n    query += ' WHERE ' + where;\n  }\n\n  query += ' DELETE data RETURN count(data)';\n\n  this.cypherQuery(query, properties, function (err, res) {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t} else {\n\t\t\tcallback(null, res.data[0]);\n\t\t}\n  });\n};\n\n\n/*  Read a Node ---------- */\n\nNeo4j.prototype.readNode = function(node_id, callback) {\n\tvar that = this;\n\trequest\n\t\t.get(this.url + '/db/data/node/' + node_id)\n\t\t.set(this.header)\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 200:\n\t\t\t\t\tthat.addNodeId(result.body, callback); // Node found.\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, false); // Node doesn't exist.\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' occurred while reading a node.'), null);\n\t\t\t}\n\t\t});\n};\n\n/*\tReplace a Node's properties\n    This will replace all existing properties on the node with the new set of attributes. */\n\nvar replaceNodeById = function(node_id, node_data, callback) {\n  var that = this;\n  request\n    .put(that.url + '/db/data/node/' + node_id + '/properties')\n\t.set(this.header)\n    .send(that.stringifyValueObjects(that.replaceNullWithString(node_data)))\n\t\t.end(function(result) {\n      switch(result.statusCode) {\n        case 204:\n          callback(null, true);\n          break;\n        case 404:\n          callback(null, false);\n          break;\n        default:\n          callback(new Error('HTTP Error ' + result.statusCode + ' when updating a Node.'), null);\n      }\n    });\n};\n// Create an alias\nNeo4j.prototype.replaceNodeById = replaceNodeById;\nNeo4j.prototype.updateNode = replaceNodeById;\n\n/*  Update a Node properties\n    This will update all existing properties on the node with the new set of attributes. */\n\nNeo4j.prototype.updateNodeById = function(node_id, node_data, callback) {\n  var query = 'START data=node({_id}) SET ' + cypher.set('data', node_data) + ' RETURN data';\n  node_data._id = node_id;\n  this.cypherQuery(query , node_data, function(err, res) {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t} else {\n\t\t\tcallback(null, res.data[0]);\n\t\t}\n  });\n};\n\n// Update all nodes with `labels` and `oldProperties`, set the `newProperties` and remove `removeProperties`.\n// Return nothing if `returnUpdatedNodes` is `false`. Default will return all updated nodes.\n\n// * `labels`              String|Array[String]    e.g.: '' or [] or 'User' or ['User', 'Student']\n// * 'oldProperties'       Object                  e.g.: { userid: '124' }\n// * `newProperties`       Object                  e.g.: { email: 'fred@example.com' }\n// * `removeProperties`    Object                  e.g.: ['old_email', 'old_address'] (Optional)\n// * `returnUpdatedNodes`  Boolean                 e.g.: `false` (Optional, default: `true`)\n\nNeo4j.prototype.updateNodesWithLabelsAndProperties = function (labels, oldProperties, newProperties, removeProperties, returnUpdatedNodes, callback) {\n  var whereSetProperties = cypher.whereSetProperties('data', oldProperties, newProperties);\n  var where = whereSetProperties.where;\n  var query = 'MATCH (data'+  cypher.labels(labels) + ')';\n  var remove;\n\n  if (typeof removeProperties === 'function') {\n    callback = removeProperties;\n    returnUpdatedNodes = true;\n  } else {\n    remove = cypher.remove('data', removeProperties);\n    if (typeof returnUpdatedNodes === 'function') {\n      callback = returnUpdatedNodes;\n      returnUpdatedNodes = true;\n    }\n  }\n\n  if (where !== '') {\n    query += ' WHERE ' + where;\n  }\n\n  query += ' SET ' + whereSetProperties.set;\n\n  if (remove && remove !== '') {\n    query += ' REMOVE ' + remove;\n  }\n\n  if (returnUpdatedNodes) {\n    query += ' RETURN data';\n  }\n\n  this.cypherQuery(query , whereSetProperties.properties, function(err, res) {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t} else {\n\t\t\tcallback(null, res.data);\n\t\t}\n  });\n};\n\n/* Insert a Relationship ------ */\n\nNeo4j.prototype.insertRelationship = function(root_node_id, other_node_id, relationship_type, relationship_data, callback) {\n\tvar that = this;\n\trequest\n\t\t.post(that.url + '/db/data/node/' + root_node_id + '/relationships')\n\t\t.set(this.header)\n\t\t.send({\n\t\t\tto: that.url + '/db/data/node/' + other_node_id,\n\t\t\ttype: relationship_type,\n\t\t\tdata: that.stringifyValueObjects(that.replaceNullWithString(relationship_data))\n\t\t})\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 201:\n\t\t\t\t\tthat.addRelationshipId(result.body, callback);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 400: // Endnode not found exception\n\t\t\t\t\tcallback(null, false);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404: // Startnode not found exception\n\t\t\t\t\tcallback(null, false);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when inserting a Relationship.'), null);\n\t\t\t}\n\t\t});\n};\n\n/* Delete a Relationship --------- */\n\nNeo4j.prototype.deleteRelationship = function(relationship_id, callback) {\n\tvar that = this;\n\trequest\n\t\t.del(that.url + '/db/data/relationship/' + relationship_id)\n\t\t.set(this.header)\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 204:\n\t\t\t\t\tcallback(null, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404: // Relationship with that id doesn't exist.\n\t\t\t\t\tcallback(null, false);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when deleting a Relationship.'), null);\n\t\t\t}\n\t\t});\n};\n\n/* Read a Relationship ----------- */\n\nNeo4j.prototype.readRelationship = function(relationship_id, callback) {\n\tvar that = this;\n\n\trequest\n\t\t.get(that.url + '/db/data/relationship/' + relationship_id)\n\t\t.set(this.header)\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 200:\n\t\t\t\t\tthat.addRelationshipId(result.body, callback);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, false);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when reading a Relationship'), null);\n\t\t\t}\n\t\t});\n};\n\n/* Update a Relationship -------- */\n\nNeo4j.prototype.updateRelationship = function(relationship_id, relationship_data, callback) {\n\tvar that = this;\n\n\trequest\n\t\t.put(that.url + '/db/data/relationship/' + relationship_id + '/properties')\n\t\t.set(this.header)\n\t\t.send(that.stringifyValueObjects(that.replaceNullWithString(relationship_data)))\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 204:\n\t\t\t\t\tcallback(null, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, false);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when updating a Relationship.'), null);\n\t\t\t}\n\t\t});\n};\n\n/* Create an Index ---------- */\n\nNeo4j.prototype.insertIndex = function(index, callback) {\n\tvar that = this;\n\n\trequest\n\t\t.post(that.url + '/db/data/index/' + index.type + '/')\n\t\t.set(this.header)\n\t\t.send({\n\t\t\t'name': index.index,\n\t\t\t'config': index.config\n\t\t})\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 201:\n\t\t\t\t\tcallback(null, result.body);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, false);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when inserting an Index.'), null);\n\t\t\t}\n\t\t});\n};\n\n/*\tCreate an index on a property of a label\n\tExample:\n\tCreate an index on the first name of a person.\n\t\tinsertLabelIndex('Person', 'firstname', callback);\n\t\treturns {\n\t\t\t\t  'label' : 'Person',\n\t\t\t\t  'property-keys' : [ 'firstname' ]\n\t\t\t\t}\n\tNote:\n\tCompound indexes are not yet supported, only one property per index is allowed.\n\tSo ['firstname', 'lastname'] is not supported yet. */\n\nNeo4j.prototype.insertLabelIndex = function(label, property_key, callback) {\n\trequest\n\t\t\t.post(this.url + '/db/data/schema/index/' + label)\n\t\t\t.set(this.header)\n\t\t\t.send({ 'property_keys' : [property_key] })\n\t\t\t.end(function(result){\n\t\t\t\tif(result.body) {\n\t\t\t\t\tcallback(null, result.body);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(new Error('Response is empty'), null);\n\t\t\t\t}\n\t});\n};\n\nNeo4j.prototype.insertNodeIndex = function(index, callback) {\n\tvar _index = index;\n\tif(typeof index === 'string') {\n\t\t_index = {\n\t\t\ttype: 'node',\n\t\t\tindex: index\n\t\t};\n\t}\n\tthis.insertIndex(_index, callback);\n};\n\nNeo4j.prototype.insertRelationshipIndex = function(index, callback) {\n\tvar _index = index;\n\tif(typeof index === 'string') {\n\t\t_index = {\n\t\t\ttype: 'relationship',\n\t\t\tindex: index\n\t\t};\n\t}\n\tthis.insertIndex(_index, callback);\n};\n\n/* Delete an Index ---------- */\n\nNeo4j.prototype.deleteIndex = function(index, callback) {\n\trequest\n\t\t.del(this.url + '/db/data/index/' + index.type + '/' + index.index)\n\t\t.set(this.header)\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 204:\n\t\t\t\t\tcallback(null, true); // Index was deleted.\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, false); // Index doesn't exist.\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('Unknown Error while deleting Index'), null);\n\t\t\t}\n\t});\n};\n\nNeo4j.prototype.deleteNodeIndex = function(index, callback) {\n\tthis.deleteIndex({type: 'node', index: index}, callback);\n};\n\nNeo4j.prototype.deleteRelationshipIndex = function(index, callback) {\n\tthis.deleteIndex({type: 'relationship', index: index}, callback);\n};\n\nNeo4j.prototype.deleteLabelIndex = function(label, property_key, callback) {\n\trequest\n\t.del(this.url + '/db/data/schema/index/' + label + '/' + property_key)\n\t.set(this.header)\n\t.end(function(result) {\n\t\tswitch(result.statusCode) {\n\t\t\tcase 204:\n\t\t\t\tcallback(null, true); // Index was deleted.\n\t\t\t\tbreak;\n\t\t\tcase 404:\n\t\t\t\tcallback(null, false); // Index doesn't exist.\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tcallback(new Error('Unknown Error while deleting Index'), null);\n\t\t}\n\t});\n};\n\nfunction listIndexes (url, callback, header) {\n\trequest\n\t.get(url)\n\t.set(header)\n\t.end(function(result) {\n\t\tswitch(result.statusCode) {\n\t\t\tcase 200:\n\t\t\tcase 204:\n\t\t\t\tcallback(null, result.body);\n\t\t\t\tbreak;\n\t\t\tcase 404:\n\t\t\t\tcallback(null, false);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when listing all indexes.'), null);\n\t\t}\n\t});\n}\n\nNeo4j.prototype.listIndexes = function(indexType, callback) {\n\tvar url = this.url + '/db/data/index/' + indexType;\n\tlistIndexes(url, callback, this.header);\n};\n\n\nNeo4j.prototype.listNodeIndexes = function(callback) {\n\tvar url = this.url + '/db/data/index/node';\n\tlistIndexes(url, callback, this.header);\n};\n\nNeo4j.prototype.listRelationshipIndexes = function(callback) {\n\tvar url = this.url + '/db/data/index/relationship';\n\tlistIndexes(url, callback, this.header);\n};\n\n/*\tList indexes for a label\n\tExample:\n\tlistLabelIndexes('City', callback);\n\treturns [ { label: 'City', 'property-keys': [ 'postalcode' ] },\n  \t\t\t  { label: 'City', 'property-keys': [ 'name' ] } ]\t\t*/\n\nNeo4j.prototype.listLabelIndexes = function(label, callback) {\n\tvar url = this.url + '/db/data/schema/index/' + label;\n\tlistIndexes(url, callback, this.header);\n};\n\n/* Add item to Index ---------- */\n\nNeo4j.prototype.addItemToIndex = function (args, callback) {\n\tvar that = this;\n\n\trequest\n\t\t.post(that.url + '/db/data/index/' + args.indexType + '/' + args.indexName)\n\t\t.set(this.header)\n\t\t.send({\n\t\t\t'uri': that.url + '/db/data/' + args.indexType + '/' + args.itemId,\n\t\t\t'key': args.indexKey,\n\t\t\t'value': args.indexValue\n\t\t})\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 200:\n\t\t\t\t\tthat.addNodeId(result.body, callback);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 201:\n\t\t\t\t\tthat.addNodeId(result.body, callback);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when adding an Item to an Index'), null);\n\t\t\t}\n\t\t});\n};\n\nNeo4j.prototype.addNodeToIndex = function(nodeId, indexName, indexKey, indexValue, callback) {\n\tthis.addItemToIndex({\n\t\tindexType: 'node',\n\t\titemId: nodeId,\n\t\tindexName: indexName,\n\t\tindexKey: indexKey,\n\t\tindexValue: indexValue\n\t}, callback);\n};\n\nNeo4j.prototype.addRelationshipToIndex = function(nodeId, indexName, indexKey, indexValue, callback) {\n\tthis.addItemToIndex({\n\t\tindexType: 'relationship',\n\t\titemId: nodeId,\n\t\tindexName: indexName,\n\t\tindexKey: indexKey,\n\t\tindexValue: indexValue\n\t}, callback);\n};\n\n/*\tAdding one or multiple labels to a node.\n\tGiven a node id (integer) and one label (string) or multiple labels (array of strings) (non-empty strings)\n\treturns true if successfully added a label otherwise it will return false.\n\tExamples:\n\taddLabelsToNode(77, 'User', callback);\n\taddLabelsToNode(77, ['User', 'Student'], callback);\n\t\treturns true\n\taddLabelsToNode(77, ['User', ''], callback);\n\t\treturns an error! no empty string allowed\t*/\n\nNeo4j.prototype.addLabelsToNode = function(nodeId, labels, callback) {\n\tvar url = this.url + '/db/data/node/' + nodeId + '/labels';\n\tvar errorMsg = '\"Labels\" should be a non-empty string or an array of non-empty strings.';\n\n\tif (typeof labels === 'string') {\n\t\tif (labels === '') {\n\t\t\treturn callback(new Error(errorMsg), null);\n\t\t}\n\t\tlabels = [labels];\n\t}\n\n\tif (labels instanceof Array) {\n\t\trequest\n\t\t\t.post(url)\n\t\t    .set(this.header)\n\t\t\t.send(labels)\n\t\t\t.end(function(result) {\n\t\t\t\tswitch(result.statusCode) {\n\t\t\t\t\tcase 204:\n\t\t\t\t\t\tcallback(null, true); // Labels added\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 400:\n\t\t\t\t\t\tcallback(new Error(errorMsg), null); // Empty label\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 404:\n\t\t\t\t\t\tcallback(null, false); // Node doesn't exist\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when adding a label to a node.'), null);\n\t\t\t\t}\n\t\t\t});\n\t} else {\n\t\tcallback(new Error(errorMsg), null);\n\t}\n};\n\n/*\tReplacing labels on a node.\n\tThis removes any labels currently on a node, and replaces them with the new labels.\n\tGiven a node id (integer) and one label (string) or multiple labels (array of strings) (non-empty strings)\n\treturns true if successfully replaced all labels otherwise it will return false or an error.\n\tExamples:\n\treplaceLabelsFromNode(77, 'User', callback);\n\treplaceLabelsFromNode(77, ['User', 'Student'], callback);\n\t\treturns true\n\treplaceLabelsFromNode(77, ['User', ''], callback);\n\treplaceLabelsFromNode(77, null, callback);\n\t\treturns an error! no empty string allowed\t*/\n\nNeo4j.prototype.replaceLabelsFromNode = function(nodeId, labels, callback) {\n\tvar errorMsg = '\"Labels\" should be a non-empty string or an array of non-empty strings.';\n\n\tif (typeof labels === 'string') {\n\t\tif(labels === '') {\n\t\t\treturn callback(new Error(errorMsg), null);\n\t\t}\n\t\tlabels = [labels];\n\t}\n\n\tif (labels instanceof Array) {\n\t\trequest\n\t\t\t.put(this.url + '/db/data/node/' + nodeId + '/labels')\n\t\t\t.send(labels)\n\t\t    .set(this.header)\n\t\t\t.end(function(result) {\n\t\t\t\tswitch(result.statusCode) {\n\t\t\t\t\tcase 204:\n\t\t\t\t\t\tcallback(null, true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 400:\n\t\t\t\t\t\tcallback(new Error(errorMsg), null); // Empty label\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 404:\n\t\t\t\t\t\tcallback(null, false);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when replacing labels.'), null);\n\t\t\t}\n\t\t});\n\t} else {\n\t\tcallback(new Error(errorMsg), null);\n\t}\n};\n\n/*\tRemoving a label from a node\n\tGiven a node id (positive integer) and one label (non-empty string)\n\treturns true if successfully removed the label otherwise it will return false (Node doesn't exist) or an error.\n\tExamples:\n\tdeleteLabelFromNode(77, 'User', callback);\n\t\treturns true\n\tdeleteLabelFromNode(77, ['Student'], callback);\n\tdeleteLabelFromNode(77, '', callback);\n\t\treturns an error, label should be a non-empty string */\n\nNeo4j.prototype.deleteLabelFromNode = function(nodeId, label, callback) {\n\tvar val = new Validator();\n\tval.nodeId(nodeId).label(label);\n\n\tif (val.hasErrors) {\n\t\treturn callback(val.error(), null);\n\t}\n\n\trequest\n\t\t.del(this.url + '/db/data/node/' + nodeId + '/labels/'+ label)\n\t\t.set(this.header)\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 204:\n\t\t\t\t\tcallback(null, true); // Label was deleted.\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, false); // Node doesn't exist.\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('Unknown Error while deleting Index'), null);\n\t\t}\n\t});\n};\n\n/*\tGet all nodes with a label\n\tGiven a label (non-empty string)\n\treturns an array of nodes with that label\n\tExamples:\n\treadNodesWithLabel('User', callback);\n\t\treturns an array with nodes with the label 'User'\n\tdeleteLabelFromNode('DoesNotExist', callback);\n\t\treturns an empty array\t */\n\nNeo4j.prototype.readNodesWithLabel = function(label, callback) {\n\tvar that = this;\n\tvar val = new Validator();\n\n\tif (val.label(label).hasErrors) {\n\t\treturn callback(val.error(), null);\n\t}\n\n\trequest\n\t\t.get(this.url + '/db/data/label/' + label + '/nodes')\n\t\t.set(this.header)\n\t\t.end(function(result) {\n\t\t\tvar body = result.body;\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 200:\n\t\t\t\t\tif (body && body.length >= 1) {\n\t\t\t\t\t\tstep(\n\t\t\t\t\t\t\tfunction addIds() {\n\t\t\t\t\t\t\t\tvar group = this.group();\n\t\t\t\t\t\t\t\tbody.forEach(function(node) {\n\t\t\t\t\t\t\t\t\tthat.addNodeId(node, group());\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tfunction sumUp(err, nodes) {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcallback(null, nodes);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallback(null, body);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, false);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when reading a Relationship'), null);\n\t\t\t}\n\t\t});\n};\n\n/*\tGet all nodes with labels and properties\n\tGiven one label (non-empty string) or multiple labels (array of strings) and one or more properties in json\n\treturns an array of nodes with these labels and properties\n\tExamples:\n\treadNodesWithLabelsAndProperties('User',{ firstname: 'Sam', male: true }, callback);\n\t\treturns an array with nodes with the label 'User' and properties firstname='Sam' and male=true\n\treadNodesWithLabelsAndProperties(['User','Admin'], { 'name': 'DoesNotExist'}, callback);\n\t\treturns an empty array\t \t\t*/\n\nNeo4j.prototype.readNodesWithLabelsAndProperties = function(labels, properties, callback) {\n\tvar that = this;\n\tvar val = new Validator();\n\tval.labels(labels).properties(properties);\n\n\tif (val.hasErrors) {\n\t\treturn callback(val.error(), null);\n\t}\n\n\t// Only one label and one property provided\n\tif (typeof labels === 'string' && Object.keys(properties).length === 1) {\n\t\tvar props = cypher.jsonToURL(properties);\n\t\trequest\n\t\t\t.get(this.url + '/db/data/label/' + labels + '/nodes?' + props)\n\t\t\t.set(this.header)\n\t\t\t.end(function(result) {\n\t\t\t\tvar body = result.body;\n\t\t\t\tswitch(result.statusCode) {\n\t\t\t\t\tcase 200:\n\t\t\t\t\t\tif (body && body.length >= 1) {\n\t\t\t\t\t\t\tstep(\n\t\t\t\t\t\t\t\tfunction addIds(){\n\t\t\t\t\t\t\t\t\tvar group = this.group();\n\t\t\t\t\t\t\t\t\tbody.forEach(function(node){\n\t\t\t\t\t\t\t\t\t\tthat.addNodeId(node, group());\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfunction sumUp(err, nodes){\n\t\t\t\t\t\t\t\t\tif(err) {\n\t\t\t\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcallback(null, nodes);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcallback(null, body);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 404:\n\t\t\t\t\t\tcallback(null, false);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when reading Nodes.'), null);\n\t\t\t\t}\n\t\t\t});\n\t\t} else { // Multiple labels or properties provided\n\t\t\tvar query = 'MATCH (data'+  cypher.labels(labels) + ') WHERE ' + cypher.where('data', properties) + ' RETURN data';\n\t\t\tthis.cypherQuery(query, properties, function(err, res) {\n\t\t\t\tif (err) {\n\t\t\t\t\tcallback(err, null);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(err, res.data);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n};\n\n/*\tList all labels.\n\tExample:\n\tlistAllLabels(callback);\n\t\treturns [ 'User', 'Person', 'Male', 'Animal' ] */\n\nNeo4j.prototype.listAllLabels = function(callback) {\n\trequest\n\t.get(this.url + '/db/data/labels')\n\t.set(this.header)\n\t.end(function(result) {\n\t\tswitch(result.statusCode) {\n\t\t\tcase 200:\n\t\t\t\tcallback(null, result.body);\n\t\t\t\tbreak;\n\t\t\tcase 404:\n\t\t\t\tcallback(null, false);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when listing all labels.'), null);\n\t\t}\n\t});\n};\n\n/* CONSTRAINTS */\n\n/*\tCreate a uniqueness constraint on a property.\n\tExample:\n\t\tcreateUniquenessConstraint('User','email', callback);\n\t\treturns \t{\n\t\t\t\t\t  'label' : 'User',\n\t\t\t\t\t  'type' : 'UNIQUENESS',\n\t\t\t\t\t  'property-keys' : [ 'email' ]\n\t\t\t\t\t}\t\t\t*/\n\nvar createUniquenessConstraint = function(label, property_key, callback) {\n\tvar that = this;\n\tvar val = new Validator();\n\tval.label(label).property(property_key);\n\n\tif (val.hasErrors) {\n\t\treturn callback(val.error(), null);\n\t}\n\n\trequest\n\t\t.post(that.url + '/db/data/schema/constraint/' + label + '/uniqueness')\n\t\t.set(this.header)\n\t\t.send({ 'property_keys' : [property_key] })\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 200:\n\t\t\t\t\tcallback(null, result.body);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 409:\n\t\t\t\t\tcallback(null, false); // Constraint already exists\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when creating a uniqueness contraint.'), null);\n\t\t\t}\n\t\t});\n};\nNeo4j.prototype.createUniquenessConstraint = createUniquenessConstraint;\nNeo4j.prototype.createUniquenessContstraint = createUniquenessConstraint;\n\n/*\tGet a specific uniqueness constraint for a label and a property\n\tExample:\n\t\treadUniquenessConstraint('User','email', callback);\n\t\treturns [ {\n\t\t\t\t  'label' : 'User',\n\t\t\t\t  'property-keys' : [ 'email' ],\n\t\t\t\t  'type' : 'UNIQUENESS'\n\t\t\t\t} ]\t\t\t\t\t\t \t\t*/\n\nNeo4j.prototype.readUniquenessConstraint = function(label, property, callback) {\n\tvar val = new Validator();\n\tval.label(label).property(property);\n\n\tif (val.hasErrors) {\n\t\treturn callback();\n\t}\n\n\trequest\n\t\t.get(this.url + '/db/data/schema/constraint/' + label + '/uniqueness/' + property)\n\t\t.set(this.header)\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 200:\n\t\t\t\t\tcallback(null, result.body);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, false);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when reading uniqueness constraints'), null);\n\t\t\t}\n\t});\n};\n\n/*\tGet all uniqueness constraints for a label.\n\tExample:\n\t\tlistAllUniquenessConstraintsForLabel('User', callback);\n\t\treturns [ {\n\t\t\t\t  'label' : 'User',\n\t\t\t\t  'property-keys' : [ 'uid' ],\n\t\t\t\t  'type' : 'UNIQUENESS'\n\t\t\t\t}, {\n\t\t\t\t  'label' : 'User',\n\t\t\t\t  'property-keys' : [ 'email' ],\n\t\t\t\t  'type' : 'UNIQUENESS'\n\t\t\t\t} ]\t\t\t\t\t\t \t\t*/\n\nNeo4j.prototype.listAllUniquenessConstraintsForLabel = function(label, callback) {\n\tvar val = new Validator();\n\tval.label(label);\n\tif (val.hasErrors) {\n\t\treturn callback();\n\t}\n\n\trequest\n\t\t.get(this.url + '/db/data/schema/constraint/' + label + '/uniqueness')\n\t\t.set(this.header)\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 200:\n\t\t\t\t\tcallback(null, result.body);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, false);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when listing all uniqueness constraints.'), null);\n\t\t\t}\n\t});\n};\n\n/*\tGet all constraints for a label.\n\tExample:\n\t\tlistAllConstraintsForLabel('User', callback);\n\t\treturns [ {\n\t\t\t\t  'label' : 'User',\n\t\t\t\t  'property-keys' : [ 'uid' ],\n\t\t\t\t  'type' : 'UNIQUENESS'\n\t\t\t\t}, {\n\t\t\t\t  'label' : 'User',\n\t\t\t\t  'property-keys' : [ 'email' ],\n\t\t\t\t  'type' : 'UNIQUENESS'\n\t\t\t\t} ]\t\t\t\t\t\t*/\n\nNeo4j.prototype.listAllConstraintsForLabel = function(label, callback) {\n\tvar val = new Validator();\n\tval.label(label);\n\tif (val.hasErrors) {\n\t\treturn callback();\n\t}\n\n\trequest\n\t.get(this.url + '/db/data/schema/constraint/' + label)\n\t.set(this.header)\n\t.end(function(result) {\n\t\tswitch(result.statusCode) {\n\t\t\tcase 200:\n\t\t\t\tcallback(null, result.body);\n\t\t\t\tbreak;\n\t\t\tcase 404:\n\t\t\t\tcallback(null, false);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when listing all constraints.'), null);\n\t\t}\n\t});\n};\n\n\n/*\tGet all constraints.\n\tExample:\n\t\tlistAllConstraints(callback);\n\t\treturns [ {\n\t\t\t\t  'label' : 'Product',\n\t\t\t\t  'property-keys' : [ 'pid' ],\n\t\t\t\t  'type' : 'UNIQUENESS'\n\t\t\t\t}, {\n\t\t\t\t  'label' : 'User',\n\t\t\t\t  'property-keys' : [ 'email' ],\n\t\t\t\t  'type' : 'UNIQUENESS'\n\t\t\t\t} ]\t\t\t\t\t\t\t\t*/\n\nNeo4j.prototype.listAllConstraints = function(callback) {\n\trequest\n\t.get(this.url + '/db/data/schema/constraint')\n\t.set(this.header)\n\t.end(function(result) {\n\t\tswitch(result.statusCode) {\n\t\t\tcase 200:\n\t\t\t\tcallback(null, result.body);\n\t\t\t\tbreak;\n\t\t\tcase 404:\n\t\t\t\tcallback(null, false);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when listing all constraints.'), null);\n\t\t}\n\t});\n};\n\n/*\tDrop uniqueness constraint for a label and a property.\n\tReturns true if constraint was successfully removed.\n\tReturns false if the constraint was not found.\n\tExample:\n\t\tdropContstraint('User','email', callback);\n\t\treturns true\t*/\n\nNeo4j.prototype.dropUniquenessContstraint = function(label, property_key, callback) {\n\tvar val = new Validator();\n\tval.label(label).property(property_key);\n\n\tif(val.hasErrors) {\n\t\treturn callback(val.error(), null);\n\t}\n\n\trequest\n\t\t.del(this.url + '/db/data/schema/constraint/' + label + '/uniqueness/' + property_key)\n\t\t.set(this.header)\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 204:\n\t\t\t\t\tcallback(null, true); // Constraint was deleted.\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, false); // Constraint doesn't exist.\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when removing a uniqueness contraint.'), null);\n\t\t\t}\n\t\t});\n};\n\n/* TRANSACTIONS */\n\n/*\tNOTE:\n\tDetails 'statements' property in beginTransaction, addStatementsToTransaction,\n\tcommitTransaction and beginAndCommitTransaction:\n\n\tReturn results in graph format by adding\tresultDataContents : [ 'row', 'graph' ]\tto a statement.\n\tIf you want to understand the graph structure of nodes and relationships returned by your query,\n\tyou can specify the 'graph' results data format.\n\tFor example, this is useful when you want to visualise the graph structure.\n\tThe format collates all the nodes and relationships from all columns of the result,\n\tand also flattens collections of nodes and relationships, including paths.\n\n\tNote the resultDataContents property.\n\n\tExample of a 'statements' parameter:\n\t{\n\t\tstatements:\t[ { statement : 'CREATE ( bike:Bike { weight: 10 } )CREATE ( frontWheel:Wheel { spokes: 3 } )CREATE ( backWheel:Wheel { spokes: 32 } )CREATE p1 = bike -[:HAS { position: 1 } ]-> frontWheel CREATE p2 = bike -[:HAS { position: 2 } ]-> backWheel RETURN bike, p1, p2',\n    \t\t\t\t\tresultDataContents : [ 'row', 'graph' ]\n\t\t\t\t\t} ]\n\t}\n\n\n/*\tBegin a transaction\n\tYou begin a new transaction by posting zero or more Cypher statements to the transaction endpoint.\n\tThe server will respond with the result of your statements, as well as the location of your open transaction.\n\tIn the 'transaction' section you will find the expire date of the transaction. It's a RFC1123 formatted timestamp.\n\tThe transactionId will be added to the result.\n\tCheck the above 'NOTE' for more details about the statements parameter.\n\n\tExamples:\n\tbeginTransaction(callback);\n\treturns  {\n\t\t\t\tcommit: 'http://localhost:7474/db/data/transaction/10/commit',\n\t\t\t\tresults: [],\n\t\t\t\ttransaction: { expires: 'Tue, 24 Sep 2013 19:43:31 +0000' },\n\t\t\t\terrors: [],\n\t\t\t\t_id: 10\n\t\t\t}\n\n\tbeginTransaction({\n\t\t\t\t\t  statements : [ {\n\t\t\t\t\t    statement : 'CREATE (n {props}) RETURN n',\n\t\t\t\t\t    parameters : {\n\t\t\t\t\t      props : {\n\t\t\t\t\t        name : 'Adam',\n\t\t\t\t\t        age: 22\n\t\t\t\t\t      }\n\t\t\t\t\t    }\n\t\t\t\t\t  } ]\n\t\t\t\t\t}, calback);\n\treturns {\n\t\t\t\tcommit: 'http://localhost:7474/db/data/transaction/18/commit',\n\t\t\t  \tresults: [ { columns: [ 'person' ], data: [ { row: [ { age: 22, name: 'Adam' } ] } ] } ],\n\t\t\t  \ttransaction: { expires: 'Sun, 22 Sep 2013 19:31:17 +0000' },\n\t\t\t  \terrors: [],\n\t\t\t  \t_id: 18\n\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/\n\nNeo4j.prototype.beginTransaction = function(statements, callback) {\n\tvar that = this;\n\tif (!statements || typeof statements === 'function') {\n\t\tcallback = statements;\n\t\tstatements = { statements : [] };\n\t}\n\trequest\n\t\t.post(this.url + '/db/data/transaction')\n\t\t.set(this.header)\n\t\t.send(statements)\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 201:\n\t\t\t\t\tthat.addTransactionId(result.body, callback);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, false);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when beginning transaction.'), null);\n\t\t\t}\n\t\t});\n};\n\n/*\tExecute statements in an open transaction\n\tGiven that you have an open transaction, you can make a number of requests,\n\teach of which executes additional statements, and keeps the transaction open by resetting the transaction timeout.\n\tIf the transaction in rolled back or it does not exist false will be returned (to callback)\n\tIn the 'transaction' section you will find the expire date of the transaction. It's a RFC1123 formatted timestamp.\n\tThe transactionId will be added to the result.\n\tCheck the above 'NOTE' for more details about the statements parameter.\n\n\tExample:\n\t\tdb.addStatementsToTransaction(7, {\n\t\t\t\t\t\t\t\t\t\t\tstatements : [ {\n\t\t\t\t\t\t\t\t\t\t\t\tstatement : 'CREATE (p:Person {props}) RETURN p',\n\t\t\t\t\t\t\t\t\t\t\t\t\tparameters : {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops : {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname : 'Adam',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tage: 23\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t\t\t}, callback);\n\t\treturns {\n\t\t\t\t\tcommit: 'http://localhost:7474/db/data/transaction/22/commit',\n\t\t\t\t\tresults: [],\n\t\t\t\t\ttransaction: { expires: 'Wed, 25 Sep 2013 13:45:17 +0000' },\n\t\t\t\t\terrors: [],\n\t\t\t\t\ttransactionId: 22\n\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/\n\nNeo4j.prototype.addStatementsToTransaction = function(transactionId, statements, callback) {\n\tvar that = this;\n\tvar val = new Validator();\n\tval.transaction(transactionId);\n\n\tif (val.hasErrors) {\n\t\treturn callback(val.error(), null);\n\t}\n\n\trequest\n\t\t.post(this.url + '/db/data/transaction/' + transactionId)\n\t\t.set(this.header)\n\t\t.send(statements)\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 200:\n\t\t\t\t\tthat.addTransactionId(result.body, function afterAddingTransactionId (err, res) {\n\t\t\t\t\t\tif (res.errors && res.errors.length > 0) {\n\t\t\t\t\t\t\tcallback(new Error('An error occured when adding statements to the transaction. See \"errors\" inside the result for more details.'), res);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcallback(null, res);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, false); // Transaction doesn't exist.\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when adding statements to transaction.'), null);\n\t\t\t}\n\t\t});\n};\n\n/*\tReset transaction timeout of an open transaction\n\tEvery orphaned transaction is automatically expired after a period of inactivity.\n\tThis may be prevented by resetting the transaction timeout.\n\tThis request will reset the transaction timeout and return the new time at which\n\tthe transaction will expire as an RFC1123 formatted timestamp value in the “transaction” section of the response.\n\tIf the transaction in rolled back or it does not exist false will be returned (to callback)\n\tThe transactionId will be added to the result.\n\n\tExample:\n\t\tresetTimeoutTransaction(7, callback);\n\t\treturns {\n\t\t\t\t\tcommit: 'http://localhost:7474/db/data/transaction/7/commit',\n\t\t\t\t\tresults: [],\n\t\t\t\t\ttransaction: { expires: 'Tue, 24 Sep 2013 18:13:43 +0000' },\n\t\t\t\t\terrors: [],\n  \t\t\t\t\ttransactionId: 7\n  \t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/\n\nNeo4j.prototype.resetTimeoutTransaction = function(transactionId, callback) {\n\tvar that = this;\n\tvar val = new Validator();\n\tval.transaction(transactionId);\n\n\tif (val.hasErrors) {\n\t\treturn callback(val.error(), null);\n\t}\n\n\trequest\n\t\t.post(this.url + '/db/data/transaction/' + transactionId)\n\t\t.set(this.header)\n\t\t.send({ statements : [ ]})\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 200:\n\t\t\t\t\tthat.addTransactionId(result.body, callback);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, false); // Transaction doesn't exist.\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when resetting transaction timeout.'), null);\n\t\t\t}\n\t\t});\n};\n\n/*\tCommit an open transaction\n\tGiven you have an open transaction, you can send a commit request.\n\tOptionally, you submit additional statements along with the request that will\n\tbe executed before committing the transaction.\n\tIf the transaction in rolled back or it does not exist false will be returned (to callback)\n\tCheck the above 'NOTE' for more details about the statements parameter.\n\n\tExample:\n\tcommitTransaction(7, {\n\t\t\t\t\t\t\t\tstatements : [ {\n\t\t\t\t\t\t\t\t\tstatement : 'CREATE (p:Person {props}) RETURN p',\n\t\t\t\t\t\t\t\t\t\tparameters : {\n\t\t\t\t\t\t\t\t\t\t\tprops : {\n\t\t\t\t\t\t\t\t\t\t\t\tname : 'Adam',\n\t\t\t\t\t\t\t\t\t\t\t\tage: 24,\n\t\t\t\t\t\t\t\t\t\t\t\tfavoriteColors: ['Green', 'Vanilla White']\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t});\n\treturns\t{\n\t\t\t\tresults: [ { columns: [ 'p' ],\n\t\t\t\tdata: [ { row: [ {  name: 'Adam',\n\t\t\t\t\t\t\t\t\tage: 24,\n\t\t\t\t\t\t\t\t\tfavoriteColors: [ 'Green', 'Vanilla White' ] } ] } ]\n\t\t\t\t\t\t} ],\n\t\t\t\terrors: []\n\t\t\t}\t\t\t\t\t*/\n\nNeo4j.prototype.commitTransaction = function(transactionId, statements, callback){\n\tvar that = this;\n\tvar val = new Validator();\n\tval.transaction(transactionId);\n\n\tif (val.hasErrors) {\n\t\treturn callback(val.error(), null);\n\t}\n\n\n\tif (!statements || typeof statements === 'function') {\n\t\tcallback = statements;\n\t\tstatements = { statements : [] };\n\t}\n\n\trequest\n\t\t.post(this.url + '/db/data/transaction/' + transactionId + '/commit')\n\t\t.set(this.header)\n\t\t.send(statements)\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 200:\n\t\t\t\t\tcallback(null, result.body);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, false); // Transaction doesn't exist.\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when commiting transaction.'), null);\n\t\t\t}\n\t\t});\n};\n\n/*\tRollback an open transaction\n\tGiven that you have an open transaction, you can send a roll back request.\n\tThe server will roll back the transaction.\n\tIf the transaction was already rolled back or it does not exist false will be returned (to callback)\n\tIf the transaction has been rolled back true will be returned.\n\n\tExamples:\n\t\trollbackTransaction(10, callback); // transaction 10 exists\n\t\treturns true\n\t\trollbackTransaction(12345, callback); // transaction 12345 doesn't exist\n\t\treturns false\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/\n\nNeo4j.prototype.rollbackTransaction = function(transactionId, callback) {\n\tvar that = this;\n\tvar val = new Validator();\n\tval.transaction(transactionId);\n\n\tif (val.hasErrors) {\n\t\treturn callback(val.error(), null);\n\t}\n\n\trequest\n\t\t.del(this.url + '/db/data/transaction/' + transactionId)\n\t\t.set(this.header)\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 200:\n\t\t\t\t\tcallback(null, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, false); // Transaction doesn't exist.\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when rolling back transaction.'), null);\n\t\t\t}\n\t\t});\n};\n\n/*\tBegin and commit a transaction in one request\n\tIf there is no need to keep a transaction open across multiple HTTP requests, you can begin a transaction,\n\texecute statements, and commit with just a single HTTP request.\n\tIf the transaction in rolled back or it does not exist false will be returned (to callback)\n\tCheck the above 'NOTE' for more details about the statements parameter.\n\n\tExamples:\n\t\tbeginAndCommitTransaction({\n\t\t\t\t\t\t\t\t\tstatements : [ {\n\t\t\t\t\t\t\t\t\t\tstatement : 'CREATE (p:Person {props}) RETURN p',\n\t\t\t\t\t\t\t\t\t\t\tparameters : {\n\t\t\t\t\t\t\t\t\t\t\t\tprops : {\n\t\t\t\t\t\t\t\t\t\t\t\t\tname : 'Adam',\n\t\t\t\t\t\t\t\t\t\t\t\t\tage: 21.17,\n\t\t\t\t\t\t\t\t\t\t\t\t\tfavoriteNumbers: [123, 456789],\n\t\t\t\t\t\t\t\t\t\t\t\t\tgender: true\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t}, callback);\n\t\treturns {\n\t\t\t\t\tresults: [ { columns: [ 'p' ],\n\t\t\t\t\tdata: [ { row: [ {\tgender: true,\n\t\t\t\t\t\t\t\t\t\tname: 'Adam',\n\t\t\t\t\t\t\t\t\t\tfavoriteNumbers: [ 123, 456789 ],\n\t\t\t\t\t\t\t\t\t\tage: 21.17 } ] } ] } ],\n\t\t\t\t\terrors: []\n\t\t\t\t}\n\n\t\tbeginAndCommitTransaction({\n\t\t\t\t\t\t\t\t\tstatements : [ {\n\t\t\t\t\t\t\t\t\t\tstatement : 'CREATE (p:Person {props}) RETURN p',\n\t\t\t\t\t\t\t\t\t\tparameters : {\n\t\t\t\t\t\t\t\t\t\t\tprops : {\n\t\t\t\t\t\t\t\t\t\t\t\tname : 'Adam',\n\t\t\t\t\t\t\t\t\t\t\t\tage: 21.17,\n\t\t\t\t\t\t\t\t\t\t\t\tfavoriteNumbers: [123, 456789],\n\t\t\t\t\t\t\t\t\t\t\t\tgender: true\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tresultDataContents : [ 'row', 'graph' ]\n\t\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t\t}, callback);\n\n\t\treturns {\tresults: [ { columns: [ 'p' ],\n\t\t\t\t\tdata: [ { row: [ {\tgender: true,\n\t\t\t\t\t\t\t\t\t\tname: 'Adam',\n\t\t\t\t\t\t\t\t\t\tfavoriteNumbers: [ 123, 456789 ],\n\t\t\t\t\t\t\t\t\t\tage: 21.17 } ],\n\t\t\t\t\t\t\t\t\t\tgraph:{ nodes: [ {\tid: '382',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabels: [ 'Person' ],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tproperties: {\tgender: true,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: 'Adam',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfavoriteNumbers: [ 123, 456789 ],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tage: 21.17 } } ],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trelationships: [] } } ] } ],\n\t\t\t\t\terrors: [] }\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/\n\nNeo4j.prototype.beginAndCommitTransaction = function(statements, callback) {\n\trequest\n\t\t.post(this.url + '/db/data/transaction/commit')\n\t\t.set(this.header)\n\t\t.set('X-Stream', true)\n\t\t.send(statements)\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 200:\n\t\t\t\t\tcallback(null, result.body);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, false); // Transaction doesn't exist.\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when beginning and commiting transaction.'), null);\n\t\t\t}\n\t\t});\n};\n\n/* ADVANCED FUNCTIONS ---------- */\n\n/* Get all Relationship Types -------- */\n\nNeo4j.prototype.readRelationshipTypes = function(callback) {\n\tvar that = this;\n\n\trequest\n\t\t.get(that.url + '/db/data/relationship/types')\n\t\t.set(this.header)\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 200:\n\t\t\t\t\tcallback(null, result.body);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when retrieving relationship types.'), null);\n\t\t\t}\n\t\t});\n};\n\n/* Get Relationships of a Node --------- */\n\nvar readRelationshipsOfNode = function(node_id, options, callback) {\n\tvar that = this;\n\n\tif (typeof options === 'function') {\n\t\tcallback = options;\n\t}\n\n\tvar url = that.url + '/db/data/node/' + node_id + '/relationships/';\n\n\t// Set direction of relationships to retrieve.\n\tif (options.direction && (options.direction === 'in' || options.direction === 'out')) {\n\t\turl += options.direction;\n\t} else {\n\t\turl += 'all';\n\t}\n\n\t// Set types of relationships to retrieve.\n\tif (options.types && options.types.length >= 1) {\n\t\turl += '/' + encodeURIComponent(options.types.join('&'));\n\t}\n\n\trequest\n\t\t.get(url)\n\t\t.set(this.header)\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 200:\n\t\t\t\t\tthat.addRelationshipIdForArray(result.body, callback);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, false);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when retrieving relationships for node ' + node_id), null);\n\t\t\t}\n\t\t});\n};\n// Create aliases\nNeo4j.prototype.readRelationshipsOfNode = readRelationshipsOfNode;\nNeo4j.prototype.readAllRelationshipsOfNode = readRelationshipsOfNode;\nNeo4j.prototype.readTypedRelationshipsOfNode = function(node_id, types, callback) {\n\tthis.readRelationshipsOfNode(node_id, {types: types}, callback);\n};\nNeo4j.prototype.readIncomingRelationshipsOfNode = function(node_id, callback) {\n\tthis.readRelationshipsOfNode(node_id, {direction: 'in'}, callback);\n};\nNeo4j.prototype.readOutgoingRelationshipsOfNode = function(node_id, callback) {\n\tthis.readRelationshipsOfNode(node_id, {direction: 'out'}, callback);\n};\n\n\n/* Run Cypher Query -------- */\n\nNeo4j.prototype.cypherQuery = function(query, params, include_stats, callback) {\n\tvar that = this;\n\tvar body = { query: query };\n\tif (params) {\n\t\tif (typeof params === 'function') {\n\t\t\tcallback = params;\n\t\t} else {\n\t\t\tbody['params'] = params;\n\t\t}\n\t}\n\tif (include_stats) {\n\t\tif (typeof include_stats === 'function') {\n\t\t\tcallback = include_stats;\n\t\t\tinclude_stats = false;\n\t\t}\n\t}\n\n\trequest\n\t\t.post(that.url + '/db/data/cypher' + (include_stats ? '?includeStats=true' : ''))\n\t\t.set(this.header)\n\t\t.set('Content-Type', 'application/json')\n\t\t.send(body)\n    .on('error', callback)\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 200:\n\t\t\t\t\tif (result.body && result.body.data.length >= 1) {\n\t\t\t\t\t\tvar addIdsToColumnData = function(columnData, callback) {\n\t\t\t\t\t\t\tstep(\n\t\t\t\t\t\t\t\tfunction addId() {\n\t\t\t\t\t\t\t\t\tvar group = this.group();\n\t\t\t\t\t\t\t\t\tcolumnData.forEach(function(node) {\n\t\t\t\t\t\t\t\t\t\tthat.addNodeId(node, group());\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfunction sumUp(err, nodes) {\n\t\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tcallback(null, nodes);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tstep(\n\t\t\t\t\t\t\tfunction eachColumn() {\n\t\t\t\t\t\t\t\tvar group = this.group();\n\t\t\t\t\t\t\t\tresult.body.data.forEach(function(columnResult) {\n\t\t\t\t\t\t\t\t\taddIdsToColumnData(columnResult, group());\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tfunction sumUp(err, columns) {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// flatten the array if only one variable is getting returned to make it more convenient.\n\t\t\t\t\t\t\t\t\tif (result.body.columns.length >= 2) {\n\t\t\t\t\t\t\t\t\t\tresult.body.data = columns;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tresult.body.data = [].concat.apply([], columns);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcallback(null, result.body);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallback(null, result.body);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, null);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when running the cypher query against neo4j.\\n' + result.body.exception + ': ' + result.body.message), null);\n\t\t\t}\n\t\t});\n};\n\n\n/* Run Batch Queries -------- */\n\nNeo4j.prototype.batchQuery = function(query, callback) {\n\tvar that = this;\n\n\trequest\n\t\t.post(that.url + '/db/data/batch')\n\t\t.set(this.header)\n\t\t.set('Content-Type', 'application/json')\n\t\t.send(query)\n\t\t.end(function(result) {\n\t\t\tswitch(result.statusCode) {\n\t\t\t\tcase 200:\n\t\t\t\t\tcallback(null, result.body);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 404:\n\t\t\t\t\tcallback(null, null);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcallback(new Error('HTTP Error ' + result.statusCode + ' when running the batch query against neo4j'), null);\n\t\t\t}\n\t\t});\n};\n\n\n/* HELPER METHODS --------- */\n\n/* Extract node_id and add it as a property. */\n\nNeo4j.prototype.addNodeId = function(node, callback) {\n\tif (node && node.self) {\n\t\tnode.data._id = parseInt(node.self.match(/\\/([0-9]+)$/)[1]);\n\t\tcallback(null, node.data);\n\t} else {\n\t\tcallback(null, node);\n\t}\n};\n\n/*\tExtract the transaction id and adds it as an _id property. */\n\nNeo4j.prototype.addTransactionId = function(node,  callback) {\n\tnode._id = parseInt(node.commit.match(/\\/transaction\\/([0-9]+)\\/commit$/)[1]);\n\tdelete node.commit;\n\tcallback(null, node);\n};\n\n/*\tExtract start node id (_start), end node id (_end) and node id (_id) add it as a property. */\n\nNeo4j.prototype.addRelationshipId = function(relationship, callback) {\n\tif (relationship.data) {\n\t\trelationship.data._start = parser.getNodeId(relationship.start);\n\t\trelationship.data._end = parser.getNodeId(relationship.end);\n\t\trelationship.data._id = parser.getRelationshipId(relationship.self);\n\t\trelationship.data._type = relationship.type;\n\t\tcallback(null, relationship.data);\n\t} else {\n\t\tcallback(new Error(\"Relationships data property doesn't exist.\", null));\n\t}\n};\n\n\n/* Add relationship_id for an array of relationships */\n\nNeo4j.prototype.addRelationshipIdForArray = function(relationships, callback) {\n\tvar that = this;\n\tstep(\n\t\tfunction process_relationships() {\n\t\t\tvar group = this.group();\n\t\t\trelationships.forEach(function(relationship) {\n\t\t\t\tthat.addRelationshipId(relationship, group());\n\t\t\t});\n\t\t},\n\t\tfunction sum_up(err, results) {\n\t\t\tif (err) {\n\t\t\t\tcallback(err, null);\n\t\t\t} else {\n\t\t\t\tcallback(null, results);\n\t\t\t}\n\t\t}\n\t);\n};\n\n/* Replace null values with an empty string */\n\nNeo4j.prototype.replaceNullWithString = function(node_data, callback) {\n\n\tfor (var key in node_data) {\n\t\tif (node_data.hasOwnProperty(key) && node_data[key] === null) {\n\t\t\tnode_data[key] = '';\n\t\t}\n\t}\n\n\treturn node_data;\n};\n\n/* Turn values that are objects themselves into strings. */\n\nNeo4j.prototype.stringifyValueObjects = function(node_data, callback) {\n\n\tfor (var key in node_data) {\n\t\tif (node_data.hasOwnProperty(key) && typeof node_data[key] === 'object') {\n\t\t\tnode_data[key] = JSON.stringify(node_data[key]);\n\t\t}\n\t}\n\n\treturn node_data;\n};\n","/home/travis/build/npmtest/node-npmtest-node-neo4j/node_modules/node-neo4j/lib/utils/cypher.js":"'use strict';\n\n// Graph utils for cypher queries\nexports.where = where;\nexports.set = set;\nexports.remove = remove;\nexports.whereSetProperties = whereSetProperties;\nexports.labels = labels;\nexports.jsonToURL = jsonToURL;\n\n/*  Internal method\n    Example:\n    params('city', {name: 'Aalst', postalcode: 9300})\n    returns city.name={name} appendToken city.postalcode={postalcode} */\n\nfunction append (fieldName, props, appendToken) {\n  var params = '';\n  var notFirst = false;\n  fieldName += '.';\n  for (var key in props) {\n    var obj = props[key];\n    if(notFirst)\n      params += appendToken;\n    else\n      notFirst = true;\n    params += fieldName + key + '={'+ key + '}';\n  }\n  return params;\n}\n\n/*  Example:\n    where('city', {name: 'Aalst', postalcode: 9300})\n    returns city.name={name} AND city.postalcode={postalcode} */\n\nfunction where (fieldName, props) {\n  return append(fieldName, props, ' AND ');\n}\n/*  Example:\n    set('city', {name: 'Aalst', postalcode: 9300})\n    returns city.name={name},city.postalcode={postalcode} */\n\nfunction set (fieldName, props) {\n  return append(fieldName, props, ',');\n}\n\n/*  Example:\n    remove('city', ['name', 'postalcode'])\n    returns city.name, city.postalcode */\n\nfunction remove (fieldName, props) {\n  var removes = '',\n    notFirst = false,\n    i = props.length;\n\n  fieldName += '.';\n\n  while (i--) {    \n     if (notFirst) {\n      removes += ',';\n    } else {\n      notFirst = true;\n    }\n    removes += fieldName + props[i];\n  }\n\n  return removes;\n}\n\n\n// Create a `where` and `set` string and a new object with unique propertynames\n// Example:\n// whereSetProperties('user', {userid: 123, firstname: 'foo'}, { firstname: 'bar' })\n// returns {\n//   where: \"user.userid={xQ_1} AND user.firstname={xQ_2}\",\n//   set: \"user.firstname={xQ_3}\",\n//   props { xQ_1: 123, xQ_2: 'foo', xQ_2: 'bar'}\n// }\n\nfunction whereSetProperties (fieldName, oldProps, newProps) {\n  var prefix = 'xQ_',\n    whereClause = '',\n    setClause = '',\n    notFirst = false,\n    props = {},\n    i = 0,\n    obj;\n  fieldName += '.';\n\n  // Build WHERE\n  for (var k in oldProps) {\n    obj = oldProps[k];\n    if(notFirst)\n      whereClause += ' AND ';\n    else\n      notFirst = true;\n    whereClause += fieldName + k + '={' + prefix + (++i) + '}';\n\n    props[prefix + i] = obj;\n  }\n\n  notFirst = false;\n\n  // Build SET\n  for (var key in newProps) {\n    obj = newProps[key];\n    if(notFirst)\n      setClause += ',';\n    else\n      notFirst = true;\n    // Create unique placeholder {xx1} {xx2} ...\n    setClause += fieldName + key + '={' + prefix + (++i) + '}';\n    // Build new properties object\n    props[prefix + i] = obj;\n  }\n\n  // Return stringified `where` and `set` clause and a new object with unique property names\n  // So there are no name collisions\n  return {\n    where: whereClause,\n    set: setClause,\n    properties: props\n  };\n}\n\n// Example:  \n//   labels(['User','Student'])\n//   returns ':User:Student'\n\nfunction labels (array) {\n  var res = '';\n  if(typeof array === 'string') {\n    return ':' + array;\n  }    \n  for (var i = 0; i < array.length; i++) {\n    res += ':' + array[i];\n  }    \n  return res;\n}\n\nfunction jsonToURL (jsonData) {\n  var result = '';\n  var notFirst = false;\n  for(var key in jsonData){\n    if(notFirst) result += '&'; else notFirst = true;\n    result += encodeURIComponent(key) + '=' + encodeURIComponent(JSON.stringify(jsonData[key]));    \n  }\n  return result;\n}","/home/travis/build/npmtest/node-npmtest-node-neo4j/node_modules/node-neo4j/lib/utils/validator.js":"'use strict';\n\nfunction Validator (errors) {\t\n\tif(errors) {\n\t\tthis.errors = errors;\n\t\tthis.hasErrors = true;\n\t} else {\n\t\tthis.errors = '';\n\t\tthis.hasErrors = false;\n\t}\n}\n\nfunction isPositiveInteger(integer) {\n\treturn typeof integer === 'number' && integer % 1 === 0 && integer >= 0;\n}\n\nValidator.prototype = {\n\tnodeId: function(nodeId) {\n\t\tvar errorMsg = '\"nodeId\" should be a positive integer.';\n\t\tif(isPositiveInteger(nodeId))\n\t\t\treturn this;\n\t\treturn this.addError(errorMsg);\n\t},\n\tlabel: function(label) {\n\t\tvar errorMsg = '\"Label\" should be a non-empty string.';\n\t\tif(label && typeof label === 'string' && label !== '')\n\t\t\treturn this;\n\n\t\treturn this.addError(errorMsg);\n\t},\n\t// \"Labels\" should be a non-empty string or an array of non-empty strings.\n\tlabels: function(labels) {\n\t\tvar errorMsg = '\"Labels\" should be a non-empty string or an array of non-empty strings.';\n\t\tif(labels && ((typeof labels === 'string' && labels !== '') || labels instanceof Array))\n\t\t\treturn this;\n\t\treturn this.addError(errorMsg);\t\t\n\t},\t\n\tproperty: function(property) {\n\t\tvar errorMsg = '\"property\" should be a non-empty string.';\n\t\tif(property && typeof property === 'string' && property !== '')\n\t\t\treturn this;\n\n\t\treturn this.addError(errorMsg);\n\t},\n\tproperties: function(properties) {\n\t\tvar errorMsg = '\"properties\" should be json.';\n\t\tif(properties && typeof properties === 'object')\n\t\t\treturn this;\n\n\t\treturn this.addError(errorMsg);\n\t},\n\ttransaction: function(transactionId) {\n\t\tvar errorMsg = '\"transactionId\" should be a an integer.';\n\t\tif(isPositiveInteger(transactionId))\n\t\t\treturn this;\n\n\t\treturn this.addError(errorMsg);\n\t}\n};\n\nValidator.prototype.addError = function addError(errorMsg) {\n\tthis.hasErrors = true;\n\tthis.errors += errorMsg + '\\n';\n\treturn this;\n}\n\nValidator.prototype.error = function error() {\t\n\treturn new Error(this.errors);\n}\n\nmodule.exports = Validator;","/home/travis/build/npmtest/node-npmtest-node-neo4j/node_modules/node-neo4j/lib/utils/parser.js":"'use strict';\n\nexports.getNodeId = getNodeId;\nexports.getRelationshipId = getRelationshipId;\n\n/* Internal method\n   Example:\n   http://db5.sb01.stations.graphenedb.com:24789/db/data/node/7\n   will return 7 as an integer */\n\nfunction getNodeId (url) {\n  return parseInt(url.match(/\\/db\\/data\\/node\\/([0-9]+)(\\/[0-9a-z\\/]+)?$/)[1]);\n}\n\n\n/* Internal method\n   Example:\n   http://db5.sb01.stations.graphenedb.com:24789/db/data/relationship/7\n   will return 7 as an integer */\n\nfunction getRelationshipId (url) {\n  return parseInt(url.match(/\\/db\\/data\\/relationship\\/([0-9]+)(\\/[0-9a-z\\/]+)?$/)[1]);\n}","/home/travis/build/npmtest/node-npmtest-node-neo4j/node_modules/node-neo4j/Gruntfile.js":"'use strict';\n\n/*global module:false*/\nmodule.exports = function(grunt) {\n\n    // Project configuration.\n    grunt.initConfig({\n        jshint: {\n            'node-neo4j': ['*.js', 'Grunfile.js', 'lib/*.js', 'test/**/*.js'],\n            options: {\n                node: true,\n                curly: true,\n                eqeqeq: true,\n                immed: true,\n                newcap: true,\n                noarg: true,\n                sub: true,\n                undef: true,\n                unused: false,\n                boss: true,\n                eqnull: true,\n                devel: true,\n                trailing: true,\n                white:  false,\n                maxcomplexity: 6,\n                multistr: true,\n                strict: 0,\n                globals   : {\n                    /* MOCHA */\n                    describe   : false,\n                    it         : false,\n                    before     : false,\n                    beforeEach : false,\n                    after      : false,\n                    afterEach  : false\n                }\n            }\n        }\n    });\n\n    // Load plugins\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n\n    // Default task.\n    grunt.registerTask('default', 'jshint:node-neo4j');\n\n    // Linting task.\n    grunt.registerTask('lint', 'jshint:node-neo4j');\n};\n"}